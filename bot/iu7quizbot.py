"""
      ===== IU7QUIZ TELEGRAM BOT =====
      Copyright (C) 2020 IU7OG Team.

      Telegram-–±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∫–∞—Ñ–µ–¥—Ä—ã –ò–£7 –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –∫—É—Ä—Å—É
      "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –°–ò", –ø—É—Ç—ë–º —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø—Ä–æ—à–µ–¥—à–∏–º –ª–µ–∫—Ü–∏—è–º.
"""

from datetime import datetime
from random import shuffle

import json
import time
import multiprocessing
import telebot
import schedule
import mongoengine

import bot.config as cfg
import bot.statistics as stat
import bot.rating as rt
from bot.dbinstances import Student, Question

bot = telebot.TeleBot(cfg.TOKEN)
mongoengine.connect(host=cfg.HOST)


def find_student(user_id, students):
    """
        –ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ user id –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
    """

    student = Student.objects(user_id=user_id).first()
    student_info = list(filter(lambda x: x[0] == student.login, students))[0]
    return student_info, students.index(student_info) + 1


def create_leaderboard_page(btn, user_id, prev_page=None):
    """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞.
    """

    students = rt.get_rating()

    if prev_page is None:
        new_page_start = 0
    else:
        split_page = prev_page.split("\n")
        if btn == "‚ñ∂Ô∏è":
            new_page_start = int(split_page[-1][:split_page[-1].find(".")])
        else:
            new_page_start = int(
                split_page[0][:split_page[0].find(".")]) - cfg.LB_PAGE_SIZE - 1

    medals = cfg.LB_MEDALS.copy()  # –ò–Ω–∞—á–µ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–∞–º—è—Ç—å –ø—Ä–æ—Å—Ç–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è.
    page_list = students[new_page_start:new_page_start + cfg.LB_PAGE_SIZE]

    student, place = find_student(user_id, students)
    page_text = f"ü§• {medals.setdefault(place, str(place) + '. ')}" + \
        f"@{student[0]} ({student[2]}). –†–µ–π—Ç–∏–Ω–≥: {student[1]:.2f}\n\n"

    for i, page in enumerate(page_list):
        curr_index = i + 1 + new_page_start
        page_text += f"{medals.setdefault(curr_index, str(curr_index) + '. ')}" + \
            f"@{page[0]} ({page[2]}). –†–µ–π—Ç–∏–Ω–≥: {page[1]:.2f}\n"

    is_border = len(page_list) != cfg.LB_PAGE_SIZE or new_page_start == 0

    return page_text, is_border


def create_markup(btns):
    """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ inline –∫–Ω–æ–ø–æ–∫ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞.
    """

    markup = telebot.types.InlineKeyboardMarkup()

    for btn_odd, btn_even in zip(btns[::2], btns[1::2]):
        markup.add(
            telebot.types.InlineKeyboardButton(text=btn_odd, callback_data=btn_odd),
            telebot.types.InlineKeyboardButton(text=btn_even, callback_data=btn_even)
        )

    return markup


def send_confirmation():
    """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å.
    """

    for student in Student.objects():
        if student.status == "standby":
            student.status = "is_ready"

            # –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ (–∏–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ —Å—Å—ã–ª–∫–µ).
            # (p.s.: –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏).
            student = send_single_confirmation(student, True)
            student.save()


def send_single_confirmation(student, is_first):
    """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å.
    """

    # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –ø–æ–ª–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ (qtime_start).
    student.qtime_start = time.time()

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton(text=cfg.READY_BTN, callback_data=cfg.READY_BTN)
    )

    if is_first:
        message = "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! " + \
            "–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ—à–µ–¥—à–µ–π –ª–µ–∫—Ü–∏–∏?",
    else:
        message = "üí° –£ –º–µ–Ω—è –ø–æ—è–≤–∏–ª—Å—è –∫ –í–∞–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å! –ì–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å?"

    bot.send_message(student.user_id, "üìù")
    bot.send_message(
        student.user_id,
        message,
        reply_markup=markup
    )

    return student


def update_queue():
    """
        –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è "–≤–æ–ø—Ä–æ—Å–∞ –¥–Ω—è".
    """

    today_question_day = ((datetime.today() - cfg.FIRST_QUESTION_DAY).seconds // 3600) % 7

    for student in Student.objects(status__ne="registration"):

        if cfg.DEV_MODE_QUEUE:
            print(f"Daily update queue of user: {student.login}\nQueue before: {student.queue}")

        # –ö–æ–ª-–≤–æ –¥–Ω–µ–π –æ–∂–∏–¥–∞–Ω–∏—è —É –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏, —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –Ω–∞ 1
        # (p.s.: –ï—Å–ª–∏ –∫–æ–ª-–≤–æ –¥–Ω–µ–π –æ–∂–∏–¥–∞–Ω–∏—è <= 0, —Ç–æ –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–µ–≥–æ–¥–Ω—è).
        for questions in student.queue:
            questions["days_left"] -= 1

        # –í–æ–ø—Ä–æ—Å –¥–Ω—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ
        student.queue.insert(0, {"question_day": today_question_day, "days_left": 0})

        if cfg.DEV_MODE_QUEUE:
            print(f"Queue after: {student.queue}\n")

        student.save()

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∏—Ç—å –±—É–¥—É—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω—ã —Ç–µ–º, –∫—Ç–æ —Å–≤–æ–±–æ–¥–µ–Ω.
    send_confirmation()


def schedule_message():
    """
        –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """

    # schedule.every().day.at("10:00").do(update_queue)
    schedule.every(1).hour.do(update_queue)
    while True:
        schedule.run_pending()
        time.sleep(1)


@bot.message_handler(commands=["start"])
def authorization(message):
    """
        –í—ã–±–æ—Ä —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    """

    if not Student.objects(user_id=message.chat.id):

        questions_queue = list()
        count_missed_questions = (datetime.today() - cfg.FIRST_QUESTION_DAY).days

        if count_missed_questions > 0:
            questions_queue = [{"question_day": i, "days_left": 0} \
                for i in range(count_missed_questions + 1)]

        student = Student(
            user_id=message.chat.id,
            login=message.chat.username,
            status="registration",
            queue=questions_queue
        )

        bot.send_message(
            message.chat.id,
            "üí¨ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É: ",
            reply_markup=create_markup(cfg.GROUPS_BTNS)
        )

        student.save()

    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")


"""
@bot.message_handler(commands=["unreg"])
def delete(message):
        #–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞.

    Question.objects().delete()
    Student.objects().delete()
    question = Question(
        day=0,
        text="–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —á–∏—Ç–∞—é—â–µ–≥–æ –ª–µ–∫—Ü–∏–∏ –ø–æ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –≤ –¥–∞–Ω–Ω–æ–º —Å–µ–º–µ—Å—Ç—Ä–µ: ",
        answers=
            ["–ö–æ—Å—Ç—Ä–∏—Ü–∫–∏–π –ê–Ω—Ç–æ–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
            "–ö–æ—Å—Ç—Ä–∏—Ü–∫–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á",
            "–ö–æ—Å—Ç—Ä–∏—Ü–∫–∏–π –°–µ—Ä–≥–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á",
            "–ö–æ—Å—Ç—Ä–∏—Ü–∫–∏–π –ò–≥–æ—Ä—å –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á"],
            correct_answer="B",
            best_time_to_answer=5
        )

    print(question.answers)
    question.save()

    print(message)
    print(Student.objects(user_id=message.from_user.id))
    Student.objects(user_id=message.from_user.id).delete()
    print(Student.objects(user_id=message.from_user.id))

    for i in range(103):
        student = Student(
            user_id=randint(1, 999999),
            login="user"+str(randint(1,10)),
            group=str(randint(1,9999999999)),
            status="standby"
        )

        student.save()
"""


@bot.message_handler(commands=["leaderboard"])
def show_leaderboard(message):
    """
        –í—ã–≤–æ–¥ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Å—Ä–µ–¥–∏ —É—á–µ–Ω–∏–∫–æ–≤.
    """

    student = Student.objects(user_id=message.from_user.id).first()

    if student.status == "standby":
        page = create_leaderboard_page(cfg.SCROLL_BTNS[1], message.chat.id)

        if Student.objects.count() > cfg.LB_PAGE_SIZE:
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(
                telebot.types.InlineKeyboardButton(
                    text=cfg.SCROLL_BTNS[1],
                    callback_data=cfg.SCROLL_BTNS[1]
                )
            )

            bot.send_message(message.chat.id, page, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, page)


@bot.message_handler(commands=["help"])
def help_message(message):
    """
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ.
    """

    student = Student.objects(user_id=message.from_user.id).first()

    if student.status == "standby":
        help_msg = "üìÆ *IU7QuizBot* by IU7OG Team üìÆ\n\n" \
            "–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–∞–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–∫—Ä–ø–µ–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –ª–µ–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ " \
            "–ø–æ –∫—É—Ä—Å—É *–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –°–∏* –≤ *–ú–ì–¢–£ –∏–º. –ù.–≠. –ë–∞—É–º–∞–Ω–∞*, " \
            "–Ω–∞ –∫–∞—Ñ–µ–¥—Ä–µ *–ò–£7*.\n\n" \
            "üõ† –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:\n" \
            "üìç –†–æ–º–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π @mRRvz\n" \
            "üìç –ü–µ—Ä–µ—Å—Ç–æ—Ä–æ–Ω–∏–Ω –ü–∞–≤–µ–ª @Justarone\n" \
            "üìç –ö–æ–Ω–æ–Ω–µ–Ω–∫–æ –°–µ—Ä–≥–µ–π @hackfeed\n" \
            "üìç –ù–∏—Ç–µ–Ω–∫–æ –ú–∏—Ö–∞–∏–ª @VASYA\_VAN\n" \
            "üìç –Ø–∫—É–±–∞ –î–º–∏—Ç—Ä–∏–π @xGULZAx\n\n" \
            "üî± –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã. 2020 –≥–æ–¥.\n" \
            "üì° [iu7og.design](https://iu7og.design) üì°\n"

        bot.send_message(message.chat.id, help_msg, parse_mode="markdown")


@bot.message_handler(commands=["question"])
def live_question_handler(message):
    """
        –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –≤–æ –≤—Ä–µ–º—è –ª–µ–∫—Ü–∏–∏.
    """

    if student := Student.objects(user_id=message.chat.id):
        student = student.first()

        if student.status == "standby":
            time_delta = datetime.today() - cfg.FIRST_CLASS_DAY
            if time_delta.seconds <= cfg.CLASS_DURATION and time_delta.days % cfg.CLASS_OFFSET == 0:
                if time.time() - student.last_live_q >= cfg.LIVE_Q_DELAY:
                    student.last_live_q = time.time()
                    student.status = "live_question"

                    student.save()

                    bot.send_message(message.chat.id, "üñãÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
                else:
                    spam_time = int(cfg.LIVE_Q_DELAY - (time.time() - student.last_live_q))
                    time_msg = f"‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {spam_time} —Å–µ–∫—É–Ω–¥ –ø—Ä–µ–∂–¥–µ —á–µ–º –µ—â–µ —Ä–∞–∑ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
                    bot.send_message(message.chat.id, time_msg)
            else:
                bot.send_message(
                    message.chat.id, "‚õî –í–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –ª–µ–∫—Ü–∏–∏.")
        elif student.status == "live_question":
            bot.send_message(message.chat.id, "üñãÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        else:
            bot.send_message(
                message.chat.id, "‚õî –ü—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞.")


@bot.message_handler(
    func=lambda msg: Student.objects(user_id=msg.chat.id).first().status == "live_question")
def question_sender(msg):
    """
        –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.
    """

    student = Student.objects(user_id=msg.chat.id).first()

    bot.send_message(cfg.LECTOR_ID, msg.text)
    bot.send_message(msg.chat.id, "üìÆ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!")

    student.status = "standby"
    student.save()


@bot.callback_query_handler(lambda call: call.data in cfg.GROUPS_BTNS)
def query_handler_reg(call):
    """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–º.
    """

    bot.answer_callback_query(call.id)
    student = Student.objects(user_id=call.message.chat.id).first()

    if student.status == "registration":
        bot.send_message(call.message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")

        student.group = call.data
        student.status = "standby"
        student.save()


@bot.callback_query_handler(lambda call: call.data == cfg.READY_BTN)
def query_handler_ready(call):
    """
        –í—ã—Å—ã–ª–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ–º,
        –∫—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å.
    """

    bot.answer_callback_query(call.id)
    student = Student.objects(user_id=call.message.chat.id).first()

    if student.status == "is_ready":
        # –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –±–µ—Ä–µ—Ç—Å—è —É –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥–∏.
        day = student.queue[0]["question_day"]
        question = Question.objects(day=day).first()

        if cfg.DEV_MODE_QUEUE:
            print(f"Queue of {student.login} after ready confirmation: {student.queue}",
                  f"Got day {day}", sep='\n', end='\n\n')

        datastore = json.loads(student.data)
        datastore, student.waiting_time = stat.ready_update(datastore, day, student.qtime_start)

        # –ó–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å—é (== –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞).
        student.qtime_start = time.time()
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å —É —Å—Ç—É–¥–µ–Ω—Ç–∞.
        student.data = json.dumps(datastore)
        shuffle(question.answers)

        message = f"‚ùì {question.text}\n\n"
        for btn, answer in zip(cfg.ANSWERS_BTNS, question.answers):
            message += f"üìå{btn}. {answer}\n"

        bot.send_message(
            call.message.chat.id,
            message,
            reply_markup=create_markup(list(cfg.ANSWERS_BTNS.keys()))
        )

        student.status = "question"
        student.save()


@bot.callback_query_handler(lambda call: call.data in cfg.ANSWERS_BTNS)
def query_handler_questions(call):
    """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º.
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å.
    """

    bot.answer_callback_query(call.id)
    student = Student.objects(user_id=call.message.chat.id).first()

    if student.status == "question":
        day = student.queue[0]["question_day"]
        question = Question.objects(day=day).first()

        if cfg.DEV_MODE_QUEUE:
            print(f"Queue of {student.login} after answering the question (before)" +
                  f": {student.queue}", f"Got day {day}", sep='\n', end='\n\n')

        datastore = json.loads(student.data)

        # 4 - emoji + –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–µ–¥ —Å–∞–º–∏–º –æ—Ç–≤–µ—Ç–æ–º)
        student_answer = call.message.text.split("\n")[cfg.ANSWERS_BTNS[call.data] + 1][4:]
        correct_answer = question.answers[cfg.ANSWERS_BTNS[question.correct_answer] - 1]

        # –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–∏ –æ–±–∑–∞–≤–æ–¥–∏—Ç—Å—è –Ω–æ–≤—ã–º –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö)
        # –≤–Ω—É—Ç—Ä–∏ handler'–æ–≤.
        if student_answer == correct_answer:
            datastore[day], question, student.queue = stat.right_answer_handler(
                datastore[day],
                question,
                (time.time(), student.qtime_start, student.waiting_time),
                student.queue
            )

            bot.send_message(call.message.chat.id, "‚úÖ –í–µ—Ä–Ω–æ! –í–∞—à –æ—Ç–≤–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω.")
        else:
            datastore[day], question, student.queue = stat.wrong_answer_handler(
                datastore[day], question, student.queue
            )

            bot.send_message(call.message.chat.id,
                             "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –∏ –æ–Ω –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω.")

        question.save()

        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
        student.data = json.dumps(datastore)
        student.qtime_start = 0
        student.waiting_time = 0

        if cfg.DEV_MODE_QUEUE:
            print(f"Queue of {student.login} after answering the question (after) " +
                  f": {student.queue}", end='\n\n')
            print(f"Check update of the stat: {datastore[day]}\n")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, —Ç–æ –µ—â–µ —Ä–∞–∑ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        # –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.
        if len(student.queue) != 0 and student.queue[0]["days_left"] <= 0:
            if cfg.DEV_MODE_QUEUE:
                print("Asking one more question\n")
            send_single_confirmation(student, False)
            student.status = "is_ready"
        else:
            if cfg.DEV_MODE_QUEUE:
                print("No more questions for today")
            student.status = "standby"

        student.save()


@bot.callback_query_handler(lambda call: call.data in cfg.SCROLL_BTNS)
def query_handler_scroll(call):
    """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–∑–∞–¥ / –≤–ø–µ—Ä—ë–¥.
    """

    bot.answer_callback_query(call.id)
    new_page, is_border = create_leaderboard_page(
        call.data,
        call.message.chat.id,
        call.message.text
    )

    if is_border:
        markup = telebot.types.InlineKeyboardMarkup()
        new_btn = "‚óÄÔ∏è" if call.data == "‚ñ∂Ô∏è" else "‚ñ∂Ô∏è"
        markup.add(telebot.types.InlineKeyboardButton(text=new_btn, callback_data=new_btn))
    else:
        markup = create_markup(cfg.SCROLL_BTNS)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        text=new_page,
        message_id=call.message.message_id,
        reply_markup=markup
    )


if __name__ == "__main__":
    multiprocessing.Process(target=schedule_message, args=()).start()
    bot.polling()
