"""
      ===== IU7QUIZ TELEGRAM BOT =====
      Copyright (C) 2020 IU7OG Team.

      Telegram-–±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∫–∞—Ñ–µ–¥—Ä—ã –ò–£7 –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –∫—É—Ä—Å—É
      "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –°–ò", –ø—É—Ç—ë–º —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø—Ä–æ—à–µ–¥—à–∏–º –ª–µ–∫—Ü–∏—è–º.
"""

from datetime import datetime
from functools import reduce

import time
import multiprocessing
import telebot
import schedule
import mongoengine

from dbinstances import Student, Question
from config import TOKEN, HOST, GROUPS_BTNS, ANSWERS_BTNS

bot = telebot.TeleBot(TOKEN)
mongoengine.connect(host=HOST)


def create_markup(buttons):
    """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ inline –∫–Ω–æ–ø–æ–∫ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞.
    """

    markup = telebot.types.InlineKeyboardMarkup()

    for btn_odd, btn_even in zip(buttons[::2], buttons[1::2]):
        markup.add(
            telebot.types.InlineKeyboardButton(
                text=btn_odd, callback_data=btn_odd),
            telebot.types.InlineKeyboardButton(
                text=btn_even, callback_data=btn_even)
        )

    return markup


def schedule_message():
    """
        –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    def sending_messages():
        """
            –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
        """

        question = Question.objects(day=datetime.today().weekday())[0]
        for student in Student.objects():
            bot.send_message(
                student.user_id,
                "‚ùì " + question.text + reduce(lambda x, y: x + "üìå " + y + "\n", question.answers, "\n\n"),
                reply_markup=create_markup(ANSWERS_BTNS)
            )

    schedule.every(1).minutes.do(sending_messages)
    while True:
        schedule.run_pending()
        time.sleep(1)


@bot.message_handler(commands=["start"])
def authorization(message):
    """
        –í—ã–±–æ—Ä —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    """

    if not Student.objects(user_id=message.from_user.id):
        bot.send_message(
            message.chat.id,
            "üí¨ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É: ",
            reply_markup=create_markup(GROUPS_BTNS)
        )

    else:
        bot.send_message(
            message.chat.id, "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")



"""
@bot.message_handler(commands=["unreg"])
def delete(message):
    #–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞.

    Question.objects().delete()
    question = Question(
        day=6,
        text="–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —á–∏—Ç–∞—é—â–µ–≥–æ –ª–µ–∫—Ü–∏–∏ –ø–æ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –≤ –¥–∞–Ω–Ω–æ–º —Å–µ–º–µ—Å—Ç—Ä–µ: ",
        answers=
            ["A. –ö–æ—Å—Ç—Ä–∏—Ü–∫–∏–π –ê–Ω—Ç–æ–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
            "B. –ö–æ—Å—Ç—Ä–∏—Ü–∫–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á",
            "C. –ö–æ—Å—Ç—Ä–∏—Ü–∫–∏–π –°–µ—Ä–≥–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á",
            "D. –ö–æ—Å—Ç—Ä–∏—Ü–∫–∏–π –ò–≥–æ—Ä—å –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á"],
        correct_answer="B"
    )
    print(question.answers)
    question.save()

    print(message)
    print(Student.objects(user_id=message.from_user.id))
    Student.objects(user_id=message.from_user.id).delete()
    print(Student.objects(user_id=message.from_user.id))
"""



@bot.message_handler(commands=["leaderboard"])
def show_leaderboard(message):
    """
        –í—ã–≤–æ–¥ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Å—Ä–µ–¥–∏ —É—á–µ–Ω–∏–∫–æ–≤.
    """

    if Student.objects(user_id=message.from_user.id):
        msg = ""
        for student in Student.objects():
            msg += "–õ–æ–≥–∏–Ω: " + str(student.login) + \
                "\n–ì—Ä—É–ø–ø–∞: " + student.group + "\n"
    else:
        msg = "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É."

    bot.send_message(message.chat.id, msg)


@bot.message_handler(commands=["help"])
def help_message(message):
    """
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ.
    """

    bot.send_message(
        message.chat.id, "–¢—É—Ç –Ω–∞–ø–∏—à–µ–º –ø—Ä–æ —Å–µ–±—è –∏ –ø—Ä–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")


# @bot.message_handler(func=lambda message: True)
# def echo_message(message):
#     """
#         –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –≤–æ –≤—Ä–µ–º—è –ª–µ–∫—Ü–∏–∏.
#     """
#     bot.reply_to(message, "üìÆ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!")


@bot.callback_query_handler(lambda call: call.data in GROUPS_BTNS)
def query_handler_reg(call):
    """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–º.
    """

    bot.answer_callback_query(call.id)
    if not Student.objects(user_id=call.message.chat.id):
        student = Student(
            user_id=call.message.chat.id,
            login=call.message.chat.username,
            group=call.data
        )

        student.save()
        bot.send_message(call.message.chat.id,
                         "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")


@bot.callback_query_handler(lambda call: call.data in ANSWERS_BTNS)
def query_handler_questions(call):
    """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º.
    """

    bot.answer_callback_query(call.id)
    question = Question.objects(day=datetime.today().weekday())[0]
    if call.data == question.correct_answer:
        bot.send_message(call.message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
    else:
        bot.send_message(call.message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç")


if __name__ == "__main__":
    multiprocessing.Process(target=schedule_message, args=()).start()
    bot.polling()
