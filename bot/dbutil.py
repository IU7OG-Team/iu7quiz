"""
      ===== IU7QUIZ DB UTIL =====
      Copyright (C) 2020 IU7OG Team.

      –†–∞–±–æ—Ç–∞ —Å –ë–î –ø—Ä—è–º—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏.
"""

from bot.dbinstances import parse_to_mongo
from bot.iu7quizbot import update_queue, send_confirmation, bot
from bot.config import ALLOWED_STATUS
from bot.dbinstances import Student, Question


def usage():
    """
        –ò–Ω—Ñ–æ—Ä–º–∞–∏—Ü—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —É—Ç–∏–ª–∏—Ç—ã.
    """

    msg = "üî• IU7QUIZ DB UTIL\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" + \
        "\t1. –í—ã–∑–≤–≤–∞—Ç—å update_queue - /dev updqueue\n" + \
        "\t2. –í—ã–∑–≤–∞—Ç—å send_confirmation - /dev sndconfirm\n" + \
        "\t3. –í—ã–∑–≤–∞—Ç—å parse_to_mongo - /dev prsmongo\n" + \
        "\t4. –†–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - /dev sendmsg <status> <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n" + \
        "\t4. –†–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID - /dev sendmsgid <id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n" + \
        "\t5. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ - /dev checkproc\n" + \
        "\t6. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å - /dev lastquest\n" + \
        "\t7. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å —é–∑–µ—Ä–∞ - /dev status <id>\n" + \
        "\t8. –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —é–∑–µ—Ä–∞ - /dev change_status <id> <status>\n\n" + \
        "‚ùóÔ∏è –£–∑–Ω–∞—Ç—å ID: @userinfobot"


def form_request(message):
    """
        –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.
    """

    splitted = message.split()
    if len(splitted) == 2:
        return {"command": splitted[1]}

    elif len(splitted) == 3:
        return {"command": splitted[1], "status": splitted[2]}

    elif len(splitted) == 4:
        command = splitted[1]
        message = splitted[3]

        if command == "sendmsg":
            request = {
                "command": command,
                "data": {"status": splitted[2], "message": message}
            }

        elif command == "sendmsgid":
            request = {
                "command": command,
                "data": {"id": int(splitted[2]), "message": message}
            }

        else:
            request = {
                "command": command,
                "data": {"id": int(splitted[2]), "status": splitted[3]}
            }

        return request

    return {"command": "usage"}


def upd_queue_handler():
    """
        –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ update_queue.
    """

    try:
        update_queue()
    except:
        return "‚ùå –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ update_queue –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞"

    return "‚úÖ update_queue —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"


def send_confirm_handler():
    """
        –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_confirmation.
    """

    try:
        send_confirmation()
    except:
        return "‚ùå –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ send_confirmation –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞"

    return "‚úÖ send_confirmation —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"


def parse_mongo_handler():
    """
        –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ parse_to_mongo.
    """

    try:
        parse_to_mongo()
    except:
        return "‚ùå –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ parse_to_mongo –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞"

    return "‚úÖ parse_to_mongo —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"


def blocked_users_message(users):
    """
        –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.
    """

    msg = f""
    for user in users:
        msg += f"user['login'] user['id']\n"

    return msg


def message_by_status(data):
    """
        –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø–æ–ª—é status.
    """

    if len(data) != 2:
        return "‚ùå –ù–µ–≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã. –°–º. /dev usage"

    if data["status"] not in ALLOWED_STATUS:
        return f"‚úÖ –°—Ç–∞—Ç—É—Å–∞ {data['status']} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."

    blocked_id = []
    for student in Student.objects(status=data["status"]):
        try:
            bot.send_message(student.user_id, data["message"])
        except:
            blocked_id.append({"login": student.login, "id": student.user_id})

    if blocked_id:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è:\n" + blocked_users_message(blocked_id)
    else:
        return f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —é–∑–µ—Ä–æ–≤ —Å–æ —Å—Ç–∞—É—Å–æ–º {data['status']} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ."


def message_by_id(data):
    """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID.
    """

    if Student.objects(user_id=data["id"]) is None:
        return f"‚ùå ID {data['id']} –Ω–µ—Ç –≤ –ë–î."

    bot.send_message(data["id"], data["message"])

    return f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ID: {data['id']} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ."


def check_process():
    """
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.
    """

    return "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"


def check_last_question():
    """
        –í—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ—Ö –≤–æ–ø—Ä–æ—Å–≤.
    """

    count = Question.objects.count()
    last3_qst = Question.objetcs[count - 3:count]

    msg = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≤–æ–ø—Ä–æ—Å–∞ –≤ –î–ë:\n"
    for question in last3_qst:
        msg += questions.text + "\n"

    return msg


def check_status(data):
    """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (—Å—Ç–∞—Ç—É—Å–∞) —é–∑–µ—Ä–∞.
    """

    if student:= Student.objects(user_id=data["user_id"]) is None:
        return f"‚ùå ID {data['user_id']} –Ω–µ—Ç –≤ –ë–î."

    student = student.first()

    return f"ID: {student.user_id}, —Å—Ç–∞—Ç—É—Å: {student.status}"


def update_status(data):
    """
        –ó–∞–¥–∞—á–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å—Ç–∞—Ç—É—Å–∞) —é–∑–µ—Ä–∞ –≤ —Ä—É—á–Ω—É—é.
    """

    if status not in ALLOWED_STATUS:
        return f"‚úÖ –°—Ç–∞—Ç—É—Å–∞ {data['status']} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."

    if student:= Student.objects(user_id=data["id"]) is None:
        return f"‚ùå ID {data['user_id']} –Ω–µ—Ç –≤ –ë–î."

    student = student.first()
    student.status = data["status"]
    student.save()

    return f"‚úÖ –°—Ç–∞—Ç—É—Å {data['status']} –¥–ª—è {data['id']} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."


def dev_menu(request):
    menu = {
        "updqueue": upd_queue_handler,
        "sndconfirm": send_confirm_handler,
        "prsmongo": parse_mongo_handler,
        "sendmsg": lambda data: message_by_status(data),
        "sendmsgid": lambda data: message_by_id(data),
        "checkproc": check_process,
        "lastquest": check_last_question,
        "status": lambda data: check_status(data),
        "change_status": lambda data: update_status(data),
        "usage": usage
    }

    if request["command"] in menu:
        func = menu.get(reuqeust["command"])
    else:
        return usage()

    if "data" in request:
        return func(request["data"])
    else:
        return func()
