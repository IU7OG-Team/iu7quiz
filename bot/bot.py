"""
      ===== IU7QUIZ TELEGRAM BOT =====
      Copyright (C) 2020 IU7OG Team.

      Telegram-–±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∫–∞—Ñ–µ–¥—Ä—ã –ò–£7 –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –∫—É—Ä—Å—É
      "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –°–ò", –ø—É—Ç—ë–º —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø—Ä–æ—à–µ–¥—à–∏–º –ª–µ–∫—Ü–∏—è–º.
"""

from datetime import datetime
from functools import reduce

from random import randint

import time
import multiprocessing
import telebot
import schedule
import mongoengine

from dbinstances import Student, Question
from config import TOKEN, HOST, GROUPS_BTNS, ANSWERS_BTNS, READY_BTN, SCROLL_BTNS

bot = telebot.TeleBot(TOKEN)
mongoengine.connect(host=HOST)


def update_status(user_id, status):
    """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —É —Å—Ç—É–¥–µ–Ω—Ç–∞. –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:

        1. registration - —Å—Ç—É–¥–µ–Ω—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã).
        2. standby - —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è, —É —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
        3. confirmation - –±–æ—Ç –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å.
        4. question - –≤–æ–ø—Ä–æ—Å –≤—ã—Å–ª–∞–Ω, –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å –æ—Ç–≤–µ—Ç–æ–º.
    """

    student = Student.objects(user_id=user_id).first()
    student.status = status
    student.save()


def create_markup(buttons):
    """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ inline –∫–Ω–æ–ø–æ–∫ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞.
    """

    markup = telebot.types.InlineKeyboardMarkup()

    for btn_odd, btn_even in zip(buttons[::2], buttons[1::2]):
        markup.add(
            telebot.types.InlineKeyboardButton(
                text=btn_odd, callback_data=btn_odd),
            telebot.types.InlineKeyboardButton(
                text=btn_even, callback_data=btn_even)
        )

    return markup


def schedule_message():
    """
        –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    def sending_confirmation():
        """
            –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å.
        """

        for student in Student.objects():
            if student.status == "standby":
                update_status(student.user_id, "confirmation")

                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(
                    telebot.types.InlineKeyboardButton(text=READY_BTN, callback_data=READY_BTN))

                bot.send_message(student.user_id, "üìù")
                bot.send_message(
                    student.user_id,
                    "–ü—Ä–∏–≤–µ—Ç, –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—ã —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ –ø—Ä–æ—à–µ–¥—à–µ–π –ª–µ–∫—Ü–∏–∏? ",
                    reply_markup=markup
                )

    schedule.every(1).minutes.do(sending_confirmation)
    while True:
        schedule.run_pending()
        time.sleep(1)


@bot.message_handler(commands=["start"])
def authorization(message):
    """
        –í—ã–±–æ—Ä —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    """

    if not Student.objects(user_id=message.chat.id):
        student = Student(
            user_id=message.chat.id,
            login=message.chat.username,
            status="registration"
        )

        student.save()
        bot.send_message(
            message.chat.id,
            "üí¨ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É: ",
            reply_markup=create_markup(GROUPS_BTNS)
        )

    else:
        bot.send_message(
            message.chat.id, "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")



@bot.message_handler(commands=["unreg"])
def delete(message):
    #–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞.

    Question.objects().delete()
    Student.objects().delete()
    question = Question(
        day=1,
        text="–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —á–∏—Ç–∞—é—â–µ–≥–æ –ª–µ–∫—Ü–∏–∏ –ø–æ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –≤ –¥–∞–Ω–Ω–æ–º —Å–µ–º–µ—Å—Ç—Ä–µ: ",
        answers=
            ["A. –ö–æ—Å—Ç—Ä–∏—Ü–∫–∏–π –ê–Ω—Ç–æ–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
            "B. –ö–æ—Å—Ç—Ä–∏—Ü–∫–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á",
            "C. –ö–æ—Å—Ç—Ä–∏—Ü–∫–∏–π –°–µ—Ä–≥–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á",
            "D. –ö–æ—Å—Ç—Ä–∏—Ü–∫–∏–π –ò–≥–æ—Ä—å –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á"],
        correct_answer="C"
    )
    print(question.answers)
    question.save()

    print(message)
    print(Student.objects(user_id=message.from_user.id))
    Student.objects(user_id=message.from_user.id).delete()
    print(Student.objects(user_id=message.from_user.id))



@bot.message_handler(commands=["leaderboard"])
def show_leaderboard(message):
    """
        –í—ã–≤–æ–¥ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Å—Ä–µ–¥–∏ —É—á–µ–Ω–∏–∫–æ–≤.
    """

    student = Student.objects(user_id=message.from_user.id).first()

    if student.status == "standby":
        msg = reduce(lambda x, y: x + "–õ–æ–≥–∏–Ω: @" + str(y.login) + \
            "\n–ì—Ä—É–ø–ø–∞: " + y.group + "\n", Student.objects(), "")
        bot.send_message(message.chat.id, msg, reply_markup=create_markup(SCROLL_BTNS))


@bot.message_handler(commands=["help"])
def help_message(message):
    """
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ.
    """

    student = Student.objects(user_id=message.from_user.id).first()

    if student.status == "standby":
        bot.send_message(
            message.chat.id, "–¢—É—Ç –Ω–∞–ø–∏—à–µ–º –ø—Ä–æ —Å–µ–±—è –∏ –ø—Ä–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")


# @bot.message_handler(func=lambda message: True)
# def echo_message(message):
#     """
#         –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –≤–æ –≤—Ä–µ–º—è –ª–µ–∫—Ü–∏–∏.
#     """
#     bot.reply_to(message, "üìÆ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!")


@bot.callback_query_handler(lambda call: call.data in GROUPS_BTNS)
def query_handler_reg(call):
    """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–º.
    """

    bot.answer_callback_query(call.id)
    student = Student.objects(user_id=call.message.chat.id).first()

    if student.status == "registration":
        student.group = call.data
        student.status = "standby"
        student.save()

        student = Student(
            user_id=call.message.chat.id,
            login=call.message.chat.username,
            group=call.data
        )

        bot.send_message(call.message.chat.id,
                         "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")


@bot.callback_query_handler(lambda call: call.data == READY_BTN)
def query_handler_ready(call):
    """
        –í—ã—Å—ã–ª–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ–º,
        –∫—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å.
    """

    bot.answer_callback_query(call.id)
    student = Student.objects(user_id=call.message.chat.id).first()
    questions = Question.objects(day__mod=(datetime.today().weekday(), 0))
    question = questions[len(questions) - 1]

    if student.status == "confirmation":
        update_status(call.message.chat.id, "question")
        bot.send_message(
            call.message.chat.id,
            "‚ùì " + question.text + \
                reduce(lambda x, y: x + "üìå " + y + "\n", question.answers, "\n\n"),
            reply_markup=create_markup(ANSWERS_BTNS)
        )


@bot.callback_query_handler(lambda call: call.data in ANSWERS_BTNS)
def query_handler_questions(call):
    """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º.
    """

    bot.answer_callback_query(call.id)
    student = Student.objects(user_id=call.message.chat.id).first()

    if student.status == "question":
        questions = Question.objects(day__mod=(datetime.today().weekday(), 0))
        question = questions[len(questions) - 1]
        update_status(call.message.chat.id, "standby")

        if call.data == question.correct_answer:
            bot.send_message(
                call.message.chat.id, "‚úÖ –í–µ—Ä–Ω–æ! –í–∞—à –æ—Ç–≤–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω.")
        else:
            bot.send_message(
                call.message.chat.id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.")


@bot.callback_query_handler(lambda call: call.data in SCROLL_BTNS)
def query_handler_scroll(call):
    """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–∑–∞–¥ / –≤–ø–µ—Ä—ë–¥.
    """

    bot.answer_callback_query(call.id)

    if call.data == "‚óÄÔ∏è":
        updated_msg = "–ù–∞–∑–∞–¥..." + str(randint(1, 9999999999))
    else:
        updated_msg = "–í–ø–µ—Ä—ë–¥.." + str(randint(1, 99999999999))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        text=updated_msg,
        message_id=call.message.message_id,
        reply_markup=create_markup(SCROLL_BTNS)
    )


if __name__ == "__main__":
    multiprocessing.Process(target=schedule_message, args=()).start()
    bot.polling()
