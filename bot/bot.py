"""
      ===== IU7QUIZ TELEGRAM BOT =====
      Copyright (C) 2020 IU7OG Team.

      –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∫–∞—Ñ–µ–¥—Ä—ã –ò–£7 –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –∫—É—Ä—Å—É
      "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –°–ò", –ø—É—Ç—ë–º —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø—Ä–æ—à–µ–¥—à–∏–º –ª–µ–∫—Ü–∏—è–º.
"""

import telebot
import time
import schedule
from multiprocessing import Process
from functools import reduce
from dbinstances import Student
from config import BOT_TOKEN, GROUPS

bot = telebot.TeleBot(BOT_TOKEN)

def schedule_message():
    def sending_messages():
        for student in Student.objects():
            pass

    schedule.every(60).minutes.do(sending_messages)
    while True:
        schedule.run_pending()
        time.sleep(1)


@bot.message_handler(commands=['start'])
def authorization(message):
    """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏.
    """

    if not Student.objects(user_id=message.from_user.id):
        markup = telebot.types.InlineKeyboardMarkup()

        for group_odd, group_even in zip(GROUPS[::2], GROUPS[1::2]):
            markup.add(
                telebot.types.InlineKeyboardButton(text=group_odd, callback_data=group_odd),
                telebot.types.InlineKeyboardButton(text=group_even, callback_data=group_even)
            )

        bot.send_message(message.chat.id, "üí¨ –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É: ", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")


@bot.message_handler(commands=['unreg'])
def delete(message):
    print(Student.objects(user_id=message.from_user.id))
    Student.objects(user_id=message.from_user.id).delete()
    print(Student.objects(user_id=message.from_user.id))


@bot.message_handler(commands=['leaderboard'])
def show_leaderboard(message):
    """
        –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
    """

    if Student.objects(user_id=message.from_user.id):
        msg = reduce(lambda y, x: y + "–õ–æ–≥–∏–Ω: " + str(x.login) + "\n–ì—Ä—É–ø–ø–∞: " + x.group + "\n", Student.objects(), "")
    else:
        msg = '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ (—É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É).'

    bot.send_message(message.chat.id, msg)


@bot.message_handler(commands=['help'])
def help_message(message):
    """
        –∑–∞–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥ —Ö–µ–ª–ø–º–µ—Å–µ–¥–∂
    """

    bot.send_message(message.chat.id, "–¢—É—Ç –±—É–¥–µ—Ç –∫–∞–∫–æ–µ —Ç–æ —Ö–µ–ª–ø–º–µ—Å—Å–µ–¥–∂...")


@bot.message_handler(func=lambda message: True)
def echo_message(message):
    """
        —Ö–∑ —á–µ —Ç—É—Ç –±—É–¥–µ—Ç, –µ—Å–ª–∏ –≤–æ–æ–±—â–µ –±—É–¥–µ—Ç
    """
    bot.reply_to(message, '—Ñ–æ—Ä–∫–±–æ—Ç–∞...')


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–º.
    """

    bot.answer_callback_query(call.id)
    if not Student.objects(user_id=call.message.chat.id):
        student = Student(user_id=call.message.chat.id, login=call.message.chat.username, group=call.data)
        student.save()
        bot.send_message(call.message.chat.id, '‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.', reply_markup='')


if __name__ == "__main__":
    proc = Process(target=schedule_message, args=())
    proc.start()
    bot.polling()
